{"version":3,"sources":["Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","style","backgroundColor","display","justifyContent","alignItems","padding","score","newScore","noImageIcon","App","_useState","useState","_useState2","Object","slicedToArray","images","setImages","_useState3","_useState4","setScore","_useState5","_useState6","setNewScore","_useState7","_useState8","currentChoices","setCurrentChoices","useEffect","src","id","visible","console","log","className","map","image","imageUrl","width","height","margin","onClick","e","stopPropagation","visibleImages","objectSpread","found","find","length","concat","toConsumableArray","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1c37e42.chunk.js","sourcesContent":["import React from 'react';\nexport default function Header(props){\n    return(\n        <div style= {{\n            backgroundColor:\"cornflowerblue\",\n        display:\"flex\", \n        justifyContent:\"space-between\", \n        alignItems:\"center\", \n        padding:10\n        }}>\n        <h2>Clicky Game</h2>\n        <h3>Click an image to begin!</h3>\n        <h4>Score: {props.score}  | Top Score:  {props.newScore} </h4>\n              </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './Components/Header'\n\nconst shuffle = array2 => {\n  let array = new Array(array2);\n\tlet currentIndex = array.length;\n\tlet temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n};\n\nconst noImageIcon = 'http://webint.io/img/3b112900-7d34-11e9-aef4-f342897fbe7f'\nlet clickedImages=[];\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [score, setScore] = useState(0);\n  let [newScore, setNewScore] =useState(0);\n  const [currentChoices, setCurrentChoices] = useState([]);\n  \n  const handleClick = (e, id)=> {\n    e.stopPropagation();\n\n    const visibleImages = images.map(image => {\n      if (image.id === id) {\n        return { ...image, visible: !image.visible };\n      }\n      return image;\n    });\n    setImages(visibleImages);\n\n    const found = images.find(image => image.id === id);\n    console.log('found', found);\n\n    if (currentChoices.length === 2) {\n      setCurrentChoices([]);\n    } else if (currentChoices.length === 1) {\n      const choice1 = currentChoices[0];\n\n      if (choice1.src === found.src) {\n        console.log('matched!');\n        console.log('clicked');\n        newScore = score + 1;\n        setScore(newScore);\n        setNewScore(newScore); \n        setCurrentChoices([]);\n      } else {\n        setCurrentChoices([...currentChoices, found]);\n      }\n    } else {\n      setCurrentChoices([...currentChoices, found]);\n    }\n\n\n\n    // TODO: when the user clicks use map to change the visiblity of the image that matches the ID of\n    // what was clicked\n    // all adding scores, reseting the game, should live here\n    // if (clickedImages.indexOf(id) == -1){\n    //   console.log('clicked');\n    //     newScore = score + 1;\n    //   setScore(newScore);\n    //   setNewScore(newScore); \n    //   const shuffledImages = shuffle(images);\n    //   // setImages(shuffledImages);\n    //   clickedImages.push(id);\n    //  // console.log('SHUFFLED IMAGES:', images);\n\n    //   //console.log('NEW SCORE: ', newScore);\n    //   console.log('USER CLICKED: ', id,clickedImages);\n    // } else {\n    //   setScore(0); \n    //   const shuffledImages = shuffle(images);\n    //   // setImages(shuffledImages);\n    // }\n    \n    \n    \n  }\n\n  useEffect(() => {\n    // images\n    const images = [\n      { src: 'https://images.unsplash.com/photo-1486989813814-da4a10a6fc7d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80', id: 1, visible: false },\n      { src: 'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500', id: 2, visible: false },\n      { src: 'https://images.unsplash.com/photo-1486989813814-da4a10a6fc7d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80', id: 3, visible: false },\n      \n      { src: 'https://images.pexels.com/photos/67636/rose-blue-flower-rose-blooms-67636.jpeg?auto=format%2Ccompress&cs=tinysrgb&dpr=1&w=500', id: 4, visible: false },\n      { src: 'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500', id: 5, visible: false },\n      { src: 'http://i.dailymail.co.uk/i/pix/2015/09/01/18/2BE1E88B00000578-3218613-image-m-5_1441127035222.jpg', id: 6, visible: false },      \n      \n      { src: 'https://images.pexels.com/photos/67636/rose-blue-flower-rose-blooms-67636.jpeg?auto=format%2Ccompress&cs=tinysrgb&dpr=1&w=500', id: 7, visible: false },\n      { src: 'http://i.dailymail.co.uk/i/pix/2015/09/01/18/2BE1E88B00000578-3218613-image-m-5_1441127035222.jpg',id: 9, visible: false },\n    ];\n\n    setImages(images);\n\n    console.log(\"effect called!\", images);\n  }, []);\n\n  return (\n    <div>\n      <Header\n        score={score}\n        newScore={newScore}\n      />\n      <div \n        className=\"container\" \n        style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center',\n          backgroundColor:'lightgray',\n          padding: 10\n          }}>\n        <div className=\"row\"\n        style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center',\n          padding: 10\n          }}\n        >\n          {images.map(image => {\n            let imageUrl;\n            if (image.visible === false) {\n              imageUrl = noImageIcon;\n            } else {\n              imageUrl = image.src;\n            }\n            return <img src={imageUrl} width=\"200\" height=\"200\" style={{ margin: 10 }}\n              className=\"col-md-3\" onClick={e => handleClick(e, image.id)} />;\n\n          })}\n        </div>\n      </div>\n    </div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}